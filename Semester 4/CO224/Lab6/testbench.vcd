$date
	Mon Sep 18 16:47:14 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 8 ! Data2 [7:0] $end
$var wire 8 " OUT1 [7:0] $end
$var wire 8 # OUT2 [7:0] $end
$var wire 1 $ Read $end
$var wire 4 % Select [3:0] $end
$var wire 1 & Write $end
$var wire 8 ' immediate [7:0] $end
$var wire 8 ( mux1out [7:0] $end
$var wire 8 ) mux2out [7:0] $end
$var wire 8 * muxspecialout [7:0] $end
$var wire 8 + read_data [7:0] $end
$var wire 8 , result [7:0] $end
$var reg 1 - clk $end
$var reg 1 . reset $end
$scope module myproccessor $end
$var wire 8 / Address [7:0] $end
$var wire 8 0 Data2 [7:0] $end
$var wire 3 1 INaddr [2:0] $end
$var wire 8 2 OUT1 [7:0] $end
$var wire 3 3 OUT1addr [2:0] $end
$var wire 8 4 OUT2 [7:0] $end
$var wire 3 5 OUT2addr [2:0] $end
$var wire 1 $ Read $end
$var wire 4 6 Read_addr [3:0] $end
$var wire 4 7 Select [3:0] $end
$var wire 1 & Write $end
$var wire 1 8 busy_signal $end
$var wire 1 9 busy_wait $end
$var wire 1 : clk $end
$var wire 1 ; comp_signal $end
$var wire 1 < imm_signal $end
$var wire 8 = immediate [7:0] $end
$var wire 32 > instruction [31:0] $end
$var wire 8 ? mux1out [7:0] $end
$var wire 8 @ mux2out [7:0] $end
$var wire 8 A muxspecialout [7:0] $end
$var wire 8 B read_data [7:0] $end
$var wire 1 C reset $end
$var wire 8 D result [7:0] $end
$scope module mycounter $end
$var wire 1 8 busy_signal $end
$var wire 1 : clk $end
$var wire 1 C reset $end
$var reg 4 E Read_addr [3:0] $end
$var reg 1 F c_reg $end
$upscope $end
$scope module myreg $end
$var wire 4 G Read_Addr [3:0] $end
$var wire 1 8 busy_signal $end
$var wire 1 : clk $end
$var reg 32 H addr1 [31:0] $end
$var reg 32 I addr10 [31:0] $end
$var reg 32 J addr11 [31:0] $end
$var reg 32 K addr12 [31:0] $end
$var reg 32 L addr13 [31:0] $end
$var reg 32 M addr2 [31:0] $end
$var reg 32 N addr3 [31:0] $end
$var reg 32 O addr4 [31:0] $end
$var reg 32 P addr5 [31:0] $end
$var reg 32 Q addr6 [31:0] $end
$var reg 32 R addr7 [31:0] $end
$var reg 32 S addr8 [31:0] $end
$var reg 32 T addr9 [31:0] $end
$var reg 32 U instruction [31:0] $end
$var reg 1 V reg_clock $end
$upscope $end
$scope module mycu1 $end
$var wire 1 9 busy_wait $end
$var wire 32 W instruction [31:0] $end
$var reg 8 X Address [7:0] $end
$var reg 3 Y INaddr [2:0] $end
$var reg 3 Z OUT1addr [2:0] $end
$var reg 3 [ OUT2addr [2:0] $end
$var reg 1 \ Read $end
$var reg 4 ] Select [3:0] $end
$var reg 1 ^ Write $end
$var reg 1 _ busy $end
$var reg 1 ` busy_signal $end
$var reg 1 a comp_signal $end
$var reg 1 b imm_signal $end
$var reg 8 c immediate [7:0] $end
$upscope $end
$scope module mydata_mem1 $end
$var wire 8 d address [7:0] $end
$var wire 1 : clk $end
$var wire 1 $ read $end
$var wire 1 C reset $end
$var wire 1 & write $end
$var wire 8 e write_data [7:0] $end
$var reg 1 f busy_wait $end
$var reg 1 g clock $end
$var integer 32 h i [31:0] $end
$var reg 8 i read_data [7:0] $end
$upscope $end
$scope module myregister $end
$var wire 8 j IN [7:0] $end
$var wire 3 k INaddr [2:0] $end
$var wire 8 l OUT1 [7:0] $end
$var wire 3 m OUT1addr [2:0] $end
$var wire 8 n OUT2 [7:0] $end
$var wire 3 o OUT2addr [2:0] $end
$var wire 1 : clk $end
$var reg 8 p reg0 [7:0] $end
$var reg 8 q reg1 [7:0] $end
$var reg 8 r reg2 [7:0] $end
$var reg 8 s reg3 [7:0] $end
$var reg 8 t reg4 [7:0] $end
$var reg 8 u reg5 [7:0] $end
$var reg 8 v reg6 [7:0] $end
$var reg 8 w reg7 [7:0] $end
$upscope $end
$scope module mycomp $end
$var wire 8 x in [7:0] $end
$var wire 8 y out [7:0] $end
$var reg 8 z comp [7:0] $end
$upscope $end
$scope module mux1 $end
$var wire 1 { clk $end
$var wire 8 | input1 [7:0] $end
$var wire 8 } input2 [7:0] $end
$var wire 1 ; select $end
$var reg 8 ~ out [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 1 !" clk $end
$var wire 8 "" input1 [7:0] $end
$var wire 8 #" input2 [7:0] $end
$var wire 1 < select $end
$var reg 8 $" out [7:0] $end
$upscope $end
$scope module myalu $end
$var wire 8 %" Data1 [7:0] $end
$var wire 8 &" Data2 [7:0] $end
$var wire 4 '" Select [3:0] $end
$var reg 1 (" clock $end
$var reg 8 )" out [7:0] $end
$upscope $end
$scope module muxspecial1 $end
$var wire 1 *" clk $end
$var wire 8 +" input1 [7:0] $end
$var wire 8 ," input2 [7:0] $end
$var wire 1 8 select $end
$var reg 8 -" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx -"
bx ,"
bx +"
z*"
bx )"
1("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
z!"
bx ~
bx }
bx |
z{
b11111111 z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
1g
xf
bx e
bx d
bx c
xb
xa
1`
x_
x^
bx ]
x\
bx [
bx Z
bx Y
bx X
bx W
1V
bx U
b100111111110000000000000100 T
b1001000001000000011100000011 S
b1110000000000000010 R
b11000000100000000100000110 Q
b10000000010000010000000101 P
b1000001010000011000000011 O
b1000000000110000000010111011 N
b1000000001100000000010101010 M
b100111111110000000000000100 L
b0 K
b1001000001000000011100000110 J
b101000001100000000011111111 I
b1000000001000000000011111111 H
b0 G
1F
b0 E
bx D
0C
bx B
bx A
bx @
bx ?
bx >
bx =
x<
x;
1:
x9
18
bx 7
b0 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
0.
1-
bx ,
bx +
bx *
bx )
bx (
bx '
x&
bx %
x$
bx #
bx "
bx !
$end
#5
b11111111 -"
b11111111 *
b11111111 A
b11111111 j
b11111111 )"
b11111111 ,
b11111111 D
b11111111 e
b11111111 ,"
b1 E
b1 6
b1 G
b11111111 $"
b11111111 )
b11111111 @
b11111111 %"
b0 Z
b0 3
b0 m
b111 [
b111 5
b111 o
b100 Y
b100 1
b100 k
b11111111 c
b11111111 '
b11111111 =
b11111111 ""
b0 ]
b0 %
b0 7
b0 '"
1_
0^
0&
0\
0$
0a
0;
1b
1<
b1000000001000000000011111111 U
b1000000001000000000011111111 >
b1000000001000000000011111111 W
0-
0:
#10
1-
1:
#15
b10101010 -"
b10101010 *
b10101010 A
b10101010 j
b10101010 )"
b10101010 ,
b10101010 D
b10101010 e
b10101010 ,"
b10 E
b10 6
b10 G
b10101010 $"
b10101010 )
b10101010 @
b10101010 %"
b10 [
b10 5
b10 o
b110 Y
b110 1
b110 k
b10101010 c
b10101010 '
b10101010 =
b10101010 ""
1b
1<
b11111111 t
b1000000001100000000010101010 U
b1000000001100000000010101010 >
b1000000001100000000010101010 W
0-
0:
#20
1-
1:
#25
b10111011 -"
b10111011 *
b10111011 A
b10111011 j
b10111011 )"
b10111011 ,
b10111011 D
b10111011 e
b10111011 ,"
b11 E
b11 6
b11 G
b10111011 $"
b10111011 )
b10111011 @
b10111011 %"
b11 [
b11 5
b11 o
b11 Y
b11 1
b11 k
b10111011 c
b10111011 '
b10111011 =
b10111011 ""
1b
1<
b1000000000110000000010111011 U
b1000000000110000000010111011 >
b1000000000110000000010111011 W
b10101010 v
0-
0:
#30
1-
1:
#35
b1100101 -"
b1100101 *
b1100101 A
b1100101 j
b1100101 )"
b1100101 ,
b1100101 D
b1100101 e
b1100101 ,"
b100 E
b100 6
b100 G
b10111011 ~
b10111011 (
b10111011 ?
b10111011 #"
b1000101 !
b1000101 0
b1000101 y
b1000101 |
b10111011 #
b10111011 4
b10111011 n
b10111011 x
b10111011 }
b10101010 "
b10101010 2
b10101010 l
b10101010 &"
b10111011 $"
b10111011 )
b10111011 @
b10111011 %"
b110 Z
b110 3
b110 m
b101 Y
b101 1
b101 k
b11 c
b11 '
b11 =
b11 ""
b1 ]
b1 %
b1 7
b1 '"
0b
0<
b10111011 s
b1000001010000011000000011 U
b1000001010000011000000011 >
b1000001010000011000000011 W
0-
0:
#40
1-
1:
#45
b1100101 )"
b1100101 ,
b1100101 D
b1100101 e
b1100101 ,"
b101 E
b101 6
b101 G
b1100101 $"
b1100101 )
b1100101 @
b1100101 %"
b11111111 "
b11111111 2
b11111111 l
b11111111 &"
b1100101 ~
b1100101 (
b1100101 ?
b1100101 #"
b10011011 !
b10011011 0
b10011011 y
b10011011 |
b1100101 #
b1100101 4
b1100101 n
b1100101 x
b1100101 }
b100 Z
b100 3
b100 m
b101 [
b101 5
b101 o
b1 Y
b1 1
b1 k
b101 c
b101 '
b101 =
b101 ""
b10 ]
b10 %
b10 7
b10 '"
b10000000010000010000000101 U
b10000000010000010000000101 >
b10000000010000010000000101 W
b1100101 u
0-
0:
#50
1-
1:
#55
b11101111 -"
b11101111 *
b11101111 A
b11101111 j
b11101111 )"
b11101111 ,
b11101111 D
b11101111 e
b11101111 ,"
b110 E
b110 6
b110 G
b10101010 $"
b10101010 )
b10101010 @
b10101010 %"
b10101010 ~
b10101010 (
b10101010 ?
b10101010 #"
b1010110 !
b1010110 0
b1010110 y
b1010110 |
b10101010 #
b10101010 4
b10101010 n
b10101010 x
b10101010 }
b1100101 "
b1100101 2
b1100101 l
b1100101 &"
b1 Z
b1 3
b1 m
b110 [
b110 5
b110 o
b10 Y
b10 1
b10 k
b110 c
b110 '
b110 =
b110 ""
b11 ]
b11 %
b11 7
b11 '"
b1100101 q
b11000000100000000100000110 U
b11000000100000000100000110 >
b11000000100000000100000110 W
0-
0:
#60
1-
1:
#65
b11101111 )"
b11101111 ,
b11101111 D
b11101111 e
b11101111 ,"
b111 E
b111 6
b111 G
b11101111 $"
b11101111 )
b11101111 @
b11101111 %"
b11101111 ~
b11101111 (
b11101111 ?
b11101111 #"
b10001 !
b10001 0
b10001 y
b10001 |
b11101111 #
b11101111 4
b11101111 n
b11101111 x
b11101111 }
bx "
bx 2
bx l
bx &"
b0 Z
b0 3
b0 m
b10 [
b10 5
b10 o
b111 Y
b111 1
b111 k
b10 c
b10 '
b10 =
b10 ""
b0 ]
b0 %
b0 7
b0 '"
b1110000000000000010 U
b1110000000000000010 >
b1110000000000000010 W
b11101111 r
0-
0:
#70
1-
1:
#75
b110100 -"
b110100 *
b110100 A
b110100 j
b110100 )"
b110100 ,
b110100 D
b110100 e
b110100 ,"
b1000 E
b1000 6
b1000 G
b1000101 !
b1000101 0
b1000101 y
b1000101 |
b10111011 #
b10111011 4
b10111011 n
b10111011 x
b10111011 }
b1000101 $"
b1000101 )
b1000101 @
b1000101 %"
b11101111 "
b11101111 2
b11101111 l
b11101111 &"
b1000101 ~
b1000101 (
b1000101 ?
b1000101 #"
b111 Z
b111 3
b111 m
b11 [
b11 5
b11 o
b100 Y
b100 1
b100 k
1a
1;
b11 c
b11 '
b11 =
b11 ""
b1 ]
b1 %
b1 7
b1 '"
b11101111 w
b1001000001000000011100000011 U
b1001000001000000011100000011 >
b1001000001000000011100000011 W
0-
0:
#80
1-
1:
#85
1f
19
b1001 E
b1001 6
b1001 G
b11001100 !
b11001100 0
b11001100 y
b11001100 |
b110100 #
b110100 4
b110100 n
b110100 x
b110100 }
b110100 $"
b110100 )
b110100 @
b110100 %"
bx -"
bx *
bx A
bx j
b110100 ~
b110100 (
b110100 ?
b110100 #"
0`
08
0_
b100 [
b100 5
b100 o
1^
1&
b11111111 X
b11111111 /
b11111111 d
b100 ]
b100 %
b100 7
b100 '"
0a
0;
b100111111110000000000000100 U
b100111111110000000000000100 >
b100111111110000000000000100 W
b110100 t
0-
0:
#86
0V
#87
1V
#88
0V
#89
1V
#90
0V
1-
1:
#91
1V
#92
0V
#93
1V
#94
0V
#95
bx $"
bx )
bx @
bx %"
bx ~
bx (
bx ?
bx #"
bx !
bx 0
bx y
bx |
bx #
bx 4
bx n
bx x
bx }
bx t
1V
0-
0:
#100
1-
1:
#105
0-
0:
#110
1-
1:
#115
b1010 E
b1010 6
b1010 G
bx )"
bx ,
bx D
bx e
bx ,"
bx -"
bx *
bx A
bx j
bx "
bx 2
bx l
bx &"
1`
18
b0 Z
b0 3
b0 m
b0 [
b0 5
b0 o
b0 Y
b0 1
b0 k
b0 c
b0 '
b0 =
b0 ""
b0 ]
b0 %
b0 7
b0 '"
1_
0^
0&
0-
0:
b0 U
b0 >
b0 W
#120
1-
1:
#125
1f
19
b1011 E
b1011 6
b1011 G
b110100 -"
b110100 *
b110100 A
b110100 j
b110100 i
b110100 +
b110100 B
b110100 +"
0`
08
0_
1\
1$
b110 Y
b110 1
b110 k
b101 ]
b101 %
b101 7
b101 '"
b101000001100000000011111111 U
b101000001100000000011111111 >
b101000001100000000011111111 W
0-
0:
#126
0V
#127
1V
#128
0V
#129
1V
#130
0V
1-
1:
#131
1V
#132
0V
#133
1V
#134
0V
#135
b110100 v
1V
0-
0:
#140
1-
1:
#145
0-
0:
#150
1-
1:
#155
b10111011 )"
b10111011 ,
b10111011 D
b10111011 e
b10111011 ,"
b1100 E
b1100 6
b1100 G
b11001100 $"
b11001100 )
b11001100 @
b11001100 %"
b11001100 ~
b11001100 (
b11001100 ?
b11001100 #"
b10111011 -"
b10111011 *
b10111011 A
b10111011 j
b11101111 "
b11101111 2
b11101111 l
b11101111 &"
b11001100 !
b11001100 0
b11001100 y
b11001100 |
b110100 #
b110100 4
b110100 n
b110100 x
b110100 }
bx i
bx +
bx B
bx +"
b110100 t
1`
18
b111 Z
b111 3
b111 m
b110 [
b110 5
b110 o
b100 Y
b100 1
b100 k
1a
1;
b110 c
b110 '
b110 =
b110 ""
b1 ]
b1 %
b1 7
b1 '"
1_
0\
0$
0-
0:
b1001000001000000011100000110 U
b1001000001000000011100000110 >
b1001000001000000011100000110 W
#160
1-
1:
#165
bx -"
bx *
bx A
bx j
bx )"
bx ,
bx D
bx e
bx ,"
b1101 E
b1101 6
b1101 G
bx "
bx 2
bx l
bx &"
bx !
bx 0
bx y
bx |
bx #
bx 4
bx n
bx x
bx }
bx $"
bx )
bx @
bx %"
bx ~
bx (
bx ?
bx #"
b0 Z
b0 3
b0 m
b0 [
b0 5
b0 o
b0 Y
b0 1
b0 k
b0 c
b0 '
b0 =
b0 ""
b0 ]
b0 %
b0 7
b0 '"
0a
0;
b10111011 t
b0 U
b0 >
b0 W
0-
0:
#170
1-
1:
